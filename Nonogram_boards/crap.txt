    def rerun_all(self, line, table):
        queue = []
        #initialize queue
        for i in range(0,self.x_dim):
            queue.append((self.rerun(), table[line], self.x_segments, self.x_dim, self.column(table, i), self.y_segments, self.y_dim,
             i, line)
        while len(queue) != 0:
            try:
                t = queue.pop(0)
                t[0](*t[1:])

            except DomainNotChangedException:
                continue

    def calculate_locked_table(self,locked_table,row_table,col_table):

        for i in range(0,self.y_dim):
            master_row = row_table[i]
            for j in range(0,row_table[i]):
                if row_table[i][j] != master_row[j]:
                    master_row[j] = 2
            locked_table[i]=master_row
        for i in range(0,self.x_dim):
            master_row = col_table[i]
            for j in range(0,col_table[i]):
                if col_table[i][j] != master_row[j]:
                    master_row[j] = 2
            for j in range(o,self.y_dim):
                if master_row[j] != 2 and locked_table[j][i] == 2:
                    locked_table[j][i] == master_row
                if master_row[j] != 2 and locked_table[j][i] != 2 and master_row[j] != locked_table[j][i]:
                    raise VariableDomainEmptyException
        return locked_table




            @staticmethod
    def generate_line_alternatives_backup(size, line):
        no_of_filled = sum(line)
        no_of_white = size - no_of_filled
        no_of_blocks = len(line)
        freedom_of_first_block = size - no_of_filled - no_of_blocks + 1 + 1

        alternatives = []
        if len(line) == 1:
            alternatives = []
            for x in range(0, size - line[0] + 1):
                alternatives.append(x)
            return alternatives
        else:
            for x in range(0, freedom_of_first_block):
                temp_alternatives = Nonogram.generate_line_alternatives(size - line[0] - 1 - x, line[1:])
                adjusted_positions = [y + line[0] + 1 + x for y in temp_alternatives]
                for alternative in adjusted_positions:
                    if isinstance(alternative, int):
                        alternatives.append([x, alternative])
                    else:
                        alternatives.append(alternative.insert(0, x))
        return alternatives

    # reruns the domain constraint algorithm and return an updated  changed_line. This version calculates the entire line and not only one field, might be usefull later on
    @staticmethod
    def rerun_backup(pos_ul, block_size_ul, size_ul, pos_cl, block_size_cl, size_cl, x_cross, y_cross):
        master_line = None
        for line_alternative in pos_ul:
            alternative = Nonogram.pos_to_table(line_alternative, block_size_ul, size_ul)
            if master_line is None:
                master_line = alternative
            for i in range(0, size_ul):
                if master_line[i] != alternative[i]:
                    master_line[i] = 2
        # Todo comparison to cl to check if match
        return




    # reruns the domain constraint algorithm and return an updated  changed_line. This version calculates the entire line and not only one field, might be usefull later on
    @staticmethod
    def rerun(pos_ul, block_size_ul, size_ul, pos_cl, block_size_cl, size_cl, ul_cross, cl_cross):
        if len(block_size_cl) != len(pos_cl) or len(block_size_ul) != len(pos_ul):
            raise ValueError("position and block size did not have the same number of variables")
        master = None
        # check if ul has a defined value for the crossover field, if not, raise an exception indicating that
        for line_alternative in pos_ul:
            alternative = Nonogram.pos_to_table(line_alternative, block_size_ul, size_ul)
            if master is None:
                master = alternative[ul_cross]
            if master != alternative[ul_cross]:
                raise DomainNotChangedException()

        # clear cl domain from values that does not match the locked common value
        i = 0
        while i < len(pos_cl):
            line = Nonogram.pos_to_table(pos_cl[i], block_size_cl, size_cl)
            if line[cl_cross] != master:
                del pos_cl[i]
            i += 1

        # if domain becomes empty raise an error
        if len(pos_cl) == 0:
            raise VariableDomainEmptyException()
        return pos_cl
